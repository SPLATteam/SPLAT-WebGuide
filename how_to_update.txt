Required:
readthedocs account
github account
a text editor

Create sections:
	create a reference_link to section: .. section_name:
	create a section: underline the section name with symbols (defined in this document as following)
		first layer
		===========
		second layer
		------------
		third layer
		+++++++++++
		fourth layer
		~~~~~~~~~~~~

Add link:
	:ref:`reference_link` (where reference_link is the reference_link of the section, for example :ref:`install_solver`)


Add image:
	.. image:: getting_started_extract_results_1.PNG (note: image has to be added and committed in repository under same name)
	
Add a call-out section (built-in):
	.. note::
	.. important::

Format font:
	``code``
	*italics*
	**bold**


Customized styling by Yunshu:
To use the styling below, add the following command at the beginning of the .rst file:
.. role:: inputcell
    :class: inputcell
.. role:: interfacecell
    :class: interfacecell
.. role:: button
    :class: button

You can then use the styling in the text:
	:button:`button text` (for use when referring to a button in SPLAT interface)
	:interfacecell:`interface text`
	:inputcell:`input text`

Refer to cheat sheet here for more tips:
https://sphinx-tutorial.readthedocs.io/cheatsheet/

To run the translation code, see instructions below:
1. Create a google cloud account
2. Follow the instructions on this page to get started: https://cloud.google.com/translate/docs/setup
	2a) Create a project (https://cloud.google.com/translate/docs/setup#project)
	2b) Enable API (https://cloud.google.com/translate/docs/setup#api)
	2c) You will need to create a service account and save a json key on your computer. Then, set the system environment variable to point to the key. (refer to https://cloud.google.com/translate/docs/setup#creating_service_accounts_and_keys)
Alternatively, ask YL to create json key and send it to you, then you only need to set the system environment variable to point to the key.

3. Run the code translate.py, results will be written in folder "translated"
4. Copy .rst files into "doc" folder, commit and push on the branch of the relevant language